@page
@model PlayerModel
@inject QuizState QuizState

@{
    ViewData["Title"] = "Thega Sneak Quiz";
    var seatNumber = Model.CurrentSeatNumber;
    var hasGuessed = QuizState.Guesses
    .Any(g => g.SeatNumber == Model.Guess.SeatNumber && g.GameSessionId == QuizState.GameSessionId);

}

<div class="min-vh-100 d-flex align-items-center justify-content-center">
    <div class="col-md-8">
        <div class="card shadow mb-4">
            <div class="card-header gradient-header">
                <h3 class="mb-0">Thega Sneak Quiz</h3>
            </div>
            <div class="card-body text-center">
                <img src="@QuizState.PosterUrl" alt="Movie Poster" class="img-fluid mb-3" style="max-height:750px;" />
                @if (!QuizState.RuntimeRevealed)
                {
                    @* Show server-side errors here *@
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <div>@error.ErrorMessage</div>
                            }
                        </div>
                    }
                    <form method="post" class="needs-validation" novalidate>
                        <!-- Guess form as before -->
                        <div class="mb-3">
                            <label asp-for="Guess.RuntimeGuess" class="form-label">Deine Schätzung zur Laufzeit (Minuten):</label>
                            <input asp-for="Guess.RuntimeGuess" class="form-control" type="number" min="1" required />
                            <span asp-validation-for="Guess.RuntimeGuess" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Guess.SeatNumber" class="form-label">Dein Sitzplatz:</label>
                            <input asp-for="Guess.SeatNumber" class="form-control" required />
                            <span asp-validation-for="Guess.SeatNumber" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn gradient-btn" @(hasGuessed ? "disabled" : "")>
                            Schätzung abgeben
                        </button>
                        @if (hasGuessed)
                        {
                            <div class="alert alert-info mt-3">
                                Einen Vorschlag eingereicht du hast... Warten du musst.
                            </div>
                        }
                    </form>
                }
                else
                {
                    <div class="alert alert-primary mb-4" id="actual-runtime-container">
                        <strong>Tatsächliche Laufzeit:</strong> <span id="actual-runtime">@QuizState.ActualRuntime</span> minutes
                    </div>
                    <h4 class="mt-4">Leaderboard</h4>
                    <table class="table table-striped table-hover mt-3">
                        <thead class="table-dark">
                            <tr>
                                <th>Sitz</th>
                                <th>Schätzung</th>
                                <th>Abweichung</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int? actual = QuizState.ActualRuntime;
                                var guessesWithDelta = QuizState.Guesses
                                .Select(g => new
                                {
                                    Guess = g,
                                    Delta = actual.HasValue ? Math.Abs(g.RuntimeGuess - actual.Value) : (int?)null
                                })
                                .OrderBy(x => x.Delta)
                                .ToList();
                                var minDelta = guessesWithDelta.Min(x => x.Delta);
                                var closest = guessesWithDelta.Where(x => x.Delta == minDelta).ToList();
                            }
                            @foreach (var entry in guessesWithDelta)
                            {
                                <tr class="@(closest.Contains(entry) ? "table-success" : "guess-row")">
                                    <td>@entry.Guess.SeatNumber</td>
                                    <td>@entry.Guess.RuntimeGuess</td>
                                    <td>@entry.Delta</td>
                                    <td>
                                        @if (closest.Contains(entry))
                                        {
                                            <span class="badge bg-success">Closest!</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/quizhub")
            .build();

        connection.on("ReceivePoster", function (imageUrl) {
            location.reload();
        });

        connection.on("RevealRuntime", function (actualRuntime) {
            location.reload();
        });

        connection.on("UpdateGuesses", function (guesses) {
            location.reload();
        });
        connection.on("SwitchPage", function (page) {
            window.location.href = page;
        });
        connection.start();
    </script>
}